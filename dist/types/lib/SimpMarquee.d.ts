import { ISimpMarqueeProps } from './simpMarquee.types';
import { SimpMarqueeBase } from './SimpMarqueeBase';
declare class SimpMarquee extends SimpMarqueeBase<ISimpMarqueeProps> {
    private isCanNextStep;
    private nextStepPX;
    private animationStart;
    private initialMousePosition;
    private speed;
    private isDragging;
    private isAddedDraggableClass;
    private requestId;
    private isInertia;
    private inertiaFriction;
    private inertiaThreshold;
    private inertiaAfterPause;
    private idSetTimeoutStartInertia;
    private handlerMouseMoveBind;
    private handlerTouchMoveBind;
    private mouseEnterHandlerBind;
    private mouseDownHandlerBind;
    private touchStartHandlerBind;
    private animateNextStepBind;
    private isObserverPause;
    private callbackObserverBind;
    observer: IntersectionObserver;
    observerOptions: {
        root: null;
        rootMargin: string;
        threshold: number;
    };
    private readonly isTouchDevice;
    private velocity;
    private animationFrameInertia;
    constructor(props: ISimpMarqueeProps);
    private initSetSetting;
    private init;
    protected setInitPosition(): void;
    callbackObserver(entries: IntersectionObserverEntry[]): void;
    mouseEnterHandler(): void;
    mouseLeaveHandler(): void;
    mouseDownHandler(e: MouseEvent): void;
    touchStartHandler(e: TouchEvent): void;
    private handlerTouchMove;
    private handlerTouchEnd;
    private handlerMouseMove;
    private getClientPosition;
    private handlerMouseup;
    private startInertia;
    private requestInertia;
    private inertiaClear;
    private mouseleaveClear;
    private moveHandlerStart;
    private moveEndHandler;
    private animateNextStep;
    private getDirectionPosition;
    private addNextStepDirection;
    private addTextStepPX;
    private move;
    private numberFormatRound;
    private cancelAnimationFrameInertia;
    stop(): void;
    start(): void;
    updateSpeed(newSpeed: number): void;
    destroy(): void;
}
export { SimpMarquee };
